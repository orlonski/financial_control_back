// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts     Account[]
  categories   Category[]
  creditCards  CreditCard[]
  transactions Transaction[]
  transfers    Transfer[]

  @@map("users")
}

model Account {
  id          String   @id @default(uuid())
  name        String
  type        String // CHECKING, SAVINGS, CASH, INVESTMENT
  initialBalance Decimal @default(0) @db.Decimal(15, 2)
  color       String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions       Transaction[]
  creditCards        CreditCard[]
  transfersFrom      Transfer[]    @relation("TransferFrom")
  transfersTo        Transfer[]    @relation("TransferTo")

  @@map("accounts")
}

model Category {
  id        String   @id @default(uuid())
  name      String
  type      String // INCOME, EXPENSE
  color     String?
  icon      String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("categories")
}

model CreditCard {
  id          String   @id @default(uuid())
  name        String
  closingDay  Int // 1-31 (dia de fechamento da fatura)
  dueDay      Int // 1-31 (dia de vencimento da fatura)
  limit       Decimal? @db.Decimal(15, 2)
  accountId   String // Conta vinculada que paga a fatura
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  account      Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("credit_cards")
}

model Transaction {
  id                 String    @id @default(uuid())
  type               String // INCOME, EXPENSE
  amount             Decimal   @db.Decimal(15, 2)
  date               DateTime // Para cartão: data de vencimento da fatura
  purchaseDate       DateTime? // Data real da compra (usado para cartão)
  description        String
  notes              String?
  paid               Boolean   @default(false) // Se a transação foi paga
  accountId          String
  categoryId         String
  creditCardId       String?
  recurrenceId       String?
  installmentNumber  Int? // Número da parcela atual (ex: 1, 2, 3)
  totalInstallments  Int? // Total de parcelas (ex: 3)
  userId             String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  account    Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  creditCard CreditCard? @relation(fields: [creditCardId], references: [id], onDelete: SetNull)
  recurrence Recurrence? @relation(fields: [recurrenceId], references: [id], onDelete: SetNull)

  @@index([userId, date])
  @@index([accountId])
  @@index([categoryId])
  @@index([creditCardId])
  @@map("transactions")
}

model Transfer {
  id            String   @id @default(uuid())
  amount        Decimal  @db.Decimal(15, 2)
  date          DateTime
  description   String?
  fromAccountId String
  toAccountId   String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromAccount Account @relation("TransferFrom", fields: [fromAccountId], references: [id], onDelete: Cascade)
  toAccount   Account @relation("TransferTo", fields: [toAccountId], references: [id], onDelete: Cascade)

  @@map("transfers")
}

model Recurrence {
  id                String    @id @default(uuid())
  type              String // INSTALLMENT, RECURRING
  interval          String // DAY, WEEK, MONTH, YEAR
  intervalCount     Int // 1-30
  startDate         DateTime
  endDate           DateTime?
  totalInstallments Int? // Para parcelamento
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  transactions Transaction[]

  @@map("recurrences")
}

